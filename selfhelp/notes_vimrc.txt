ITERM PERF DEBUG
stable		24s
beta			18s
nightly		18s
turning off adaptive framerate / GCD makes no difference

"{{{1 				*IDEAS*
move to orgmode I guess...

* "superbar" thing yeah
" :CD - change window-local CWD to dir of curr open buffer
	bit hand in hand: window-local fileexplorer

* show number of hits for current search + which one (if any) we're on, in statusline...
	only when search is fully active, ie. highlighted

* QUESTION: possible to define new colors? so dont have to choose between
	'guifg=blue', hi! link, and 'guifg=#5181e1'

* in vim syntax, each hi group should highlight any occurance of its own name. easy. nice.
* info: window-local (as opposed to buffer-local) syntax is set with
:ownsyntax foo

* debug syntax:
:syntime on
<do stuff>
:syntime report
"}}}
"⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏⸏  
""{{{1 				DEBUG / TROUBLESHOOT / FIXES
"{{{2					 slow scrolling splits on left/right:
" first noticed because having nerdtree etc open would make shit mad laggy
" only happens sideways, a lone horiz split is still fast...
"
" gets exponentially worse with num of splits
"
" NOT RELATED:
" tmux / 24bit in tmux / etc - makes it worse I think but not root cause
" nvim - def same in vim
" termguicolors
" signcolumn
" cursorline / colorcolumn
" lazyredraw
" general vimrc changes since february - checked first commit...
" my vimrc / any plugs, at all, actually - same when using empty
" fira code / ligatures - at least when just switched off mid-session
"
" iterm2 --beta / --nightly vs. stable...
" iterm2 at all - seems same (but less hardcore maybe) in Terminal.app... != 
"
" MAYBE:
" ligatures / iterm2 coretext vs core graphics rendering 
"
" DEFINITELY:
" multiple scrolling regions, something?
" same phenomenom but actually 1000x worse scrolling with two shells open in a couple tmux splits...
"
"
"}}}
sometimes the whole thing freezes up with 100% cpu, esp on entering window and
after :write:
profile shows -

count  total (s)   self (s)  function
   57   5.011494   0.001167  airline#extensions#branch#get_head()
   57   5.010327   0.001942  airline#extensions#branch#head()
   57   5.000767   0.004057  <SNR>162_update_untracked()
    8   4.995163             airline#util#system()
    3   1.283763   0.000366  gitgutter#async#handle_diff_job_nvim()
    2   1.282511   0.000228  gitgutter#handle_diff()
    2   1.256552   0.000422  gitgutter#sign#update_signs()
    2   1.160197   1.160178  gitgutter#sign#remove_signs()
    1   0.300363   0.000049  RefreshUI()

for just one :w and moving cursor a tiny bit afterwards. So def an airline
	issue, but originating in git somehow...so, fugitive? or?
	SNR 162 = *~/.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim*
	so slowness in |get_head()| is just from calls to |head()| which is just from
	its calls to |update_untracked()| which is in turn from |system()| which calls
	|jobstart()| / |system()| / |jobwait()| (nvim) or just |system()| (vim)

	gitgutter is also showing incorrect info when this happens, like "+27" lines
	for vimrc unchanging. So git is def pulling something weird.

	I guess gitgutter |remove_signs()| is also a bit suspicious and should be
	worked out (after whatever the primary airline ill is here)
"________________________________________

""{{{1 				NOTES
{{{2 					UNICODE / POWERLINE DUMP
▦ ▤ ▣ ▢  ▢ 
□ ■ 
● ○ ◉ ◎ ◌ ◯
◆ ◇ ◈ 
powerline-esque, obviously not good enough bc not nearly tall enough....
▶ ►  vs powerline   ⮀

unicode, alllmost works but leaves some gaps sadly :(
◣ ◢   ◤ ◥  vs powerline   

nerd fonts shite
  
 
    
     
    
   
      
    
  
 
     
      

  
powerline       
extra 		         								 
					       				          
#				       					  
/*}}}*/
" emojis bc why not... "{{{2
  👍  👎   👌  👊   ✌️    ✋   💪     
  🌑  🌒  🌓  🌔  🌔  🌕  🌖  🌗  🌘     
  🌙  ⚡     ⭐  🌟   ✨      ☀️    🔆  🔅        💫     💥  🔥        
  ⛅  ☁️        ❄️      💧     
  💿  📀  💽   💾     ☎️    📞   📡     🔊  🔇    🔔  🔕     
  ⏳  ⌛  ⏰      ⌚       📅  📆 
  🔓  🔒  🔏  🔐    🔑     
  🔍  🔎  💡  🔦   🔧  🔩  🔨  ✂️    🔗  📐     
  🚬  💣  🔫  🔪     💊  💉 📯      📦       🐳  🐋     🌐     
  📝  📄  📃   📑   ✉️     📈  📉  📜   📋  	📇     📖  🔖   📰     
  📕 📗 📘 📙 📓 📔 📒      📚      📁  📂 
  🎤  🎼  🎶  🎹  ⚽  🎾  🎱     
  🎲  🏁  🏆     ☕   🍵   🍺     🎩     ⚓      🚀   ✈️     🚦 🚥      
	®️    ©️      ™️     
  ❕❔     ❗❓     ‼️    ⁉️ 
	⭕   ❌        
	🚫   ⛔    ⚠️    🚧      🔰     
  🕛 🕧 🕐 🕜 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕖 🕗 🕘 🕙 🕚 🕡 🕢 🕣 🕤 🕥 🕦     
	💚    💛 🔶 🔸  	🔷 🔹  🔵  💙    🔻 🔺  	📍 🚩 🎈   🎯 💢  🔴	 ❤️  
	"}}}

Question 		can you prevent "exit insert"/"enter insert" or whatever, autocmds
						from running on a simple <C-o>? 
						Cause everything doing that gets really sluggish now. Example:
" inoremap <Up>      <C-o>gk
Note: outside of <C-o>, at least <C-c> skips InsertLeave. How skip InsertEnter?


<Plug> 			needs to be |map|-ed, no |nore|
|autocmds| 	dont protect matchadd() from duplicate matches. 
						Need to also wrap a check, if !exists()


fzf has |:Maps| which is p much like my <leader>map+lista filter.

"a"{{{2  			TEXT OBJECTS
|delete| example:
dl"			  character (alias: "x")		|dl|
diw"		  inner word								*diw*
daw"		  a word										*daw*
diW"		  inner WORD (see |WORD|)	*diW*
daW"		  a WORD (see |WORD|)			*daW*
dgn"		  the next search match    *dgn*
dd"			  one line									|dd|
dis"		  inner sentence						*dis*
das"		  a sentence								*das*
dib"		  inner '(' ')' block			*dib*
dab"		  a '(' ')' block					*dab*
dip"		  inner paragraph					*dip*
dap"		  a paragraph							*dap*
diB"		  inner '{' '}' block			*diB*
daB"		  a '{' '}' block					*daB*

"{{{2					SURROUND
Old text(*=cursor)        Command     New text ~

"Hello *world!"           ds"         Hello world!
[123+4*56]/2              cs])        (123+456)/2
"Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
if *x>3 {                 ysW(        if ( x>3 ) {
my $str = *whee!;         vllllS'     my $str = 'whee!';	
DELETE:::
"Hello *world!"           ds"         Hello world!
(123+4*56)/2              ds)         123+456/2
<div>Yo!*</div>           dst         Yo!
CHANGE:::
"Hello *world!"           cs"'        'Hello world!'
"Hello *world!"           cs"<q>      <q>Hello world!</q>
(123+4*56)/2              cs)]        [123+456]/2
(123+4*56)/2              cs)[        [ 123+456 ]/2
<div>Yo!*</div>           cst<p>      <p>Yo!</p>

   *ys* takes a valid Vim motion or text object as the first object, and wraps it using the second argument as with |cs|.  (It's a stretch, but a good mnemonic for "ys" is "you surround".)
 w*orld!             ysiw)       Hello (world)!

 special case, *yss* operates on the current line, ignoring leading whitespace.
w*orld!       yssB             {Hello world!}

   There is also *yS* and *ySS* which indent the surrounded text and place it on a line of its own.
"}}}

{{{2  			 FOLD MANIP
|zf#j|				creates a fold from the cursor down # lines.
|zf/string|		creates a fold from the cursor to string.
|zj|					moves the cursor to the next fold.
|zk|					moves the cursor to the previous fold.
|zo|					opens a fold at the cursor.
|zO|					opens all folds at the cursor.
|zm|					increases the foldlevel by one.
|zM|					closes all open folds.
|zr|					decreases the foldlevel by one.
|zR|					decreases the foldlevel to zero -- all folds will be open.
|zd|					deletes the fold at the cursor.
|zE|					deletes all folds.
|[z|					move to start of open fold.
|]z|					move to end of open fold.
"}}}
"{{{2 				WINDOW MGMT
<C-W> _ 			Max out the height of the current split
<C-W> | 			Max out the width of the current split
<C-W> = 			Normalize all split sizes, which is very handy when resizing terminal
<C-W> R 			Swap top/bottom or left/right split
<C-W> T 			Break out current window into a new tabview
<C-W> o 			Close every window in the current tabview but the current one
"}}}
|{| / |}| 		normal mode = move to prev/next empty line (have remapped so arrow keys work like athat)

|[I| 					list all lines containing word under cursor! remap to something?
							or reimplement / find version that retains highlighting and actually highlights search

|q:| and |q/|	highlighted command window with list of prev cmds/searches
<C-f> 				opens history when already at : prompt

<C-X><C-L> 		complete entire lines, p cool!

|:read| |!shellcmd|  put output of cmd into buffer! sweet so like :read !pbpate

|explains| |weird|   use double-quotes and "\..." notation 					|expr-quote|
<expr> '' ""		 feedkeys("\<CR>") simulates pressing of the <Enter> key, 
|differences|		 feedkeys('\<CR>') pushes 5 characters.
								

"{{{2 				CHANGE CASE
Toggle case "HellO" to "hELLo"		g~	   then a movement.
Uppercase "HellO" to "HELLO" 			gU	   then a movement.
Lowercase "HellO" to "hello" 			gu	   then a movement.
visual mode:  ~ to toggle case, U uppercase, u lowercase.
"}}}
"{{{2 				HELP SEARCH PREFIXES
" TODO:  help stuff - each help topic has a context:
Prefix	Example				Context
:				:h :r					ex command (starting with a colon)
none		:h r					normal mode
v_			:h v_r				visual mode
i_			:h i_CTRL-W		insert mode
c_			:h c_CTRL-R		ex command line
/				:h /\r				search pattern (in this case, :h \r also works)
'				:h 'ro'				option
-				:h -r					Vim argument (starting Vim)
"}}}

|g-| |g+|	step back and forth in history purely time-wise (ignoring branches) 
|g;| |g,|	moves backward and forward in edit locations
|gn| |gN|	jump to next search match and select it! if already in visual, select to there...
|gp| |gP|	paste without moving cursor

<C-r>" 		(paste at commandline: for default register)

<C-^>			is (randomly, or bc my remappings in osx + vim both?) equiv to the 
					<C-]> that follows help links...

|map!| 		like |imap| + |cmap|
<C-v> 		visual block, duh. What to remember is that |i| for some reason
					doesn't work, need |I| to enter insert mode and operate on all at once.
					Thankfully this doesn't move cursor. Still, why? Default or a side effect from 
					something dumb? Guess it's the same thing fucking multiple cursors for me.
<C-e> 		accept completion in cmdline
<C-d> 		accept completion in cmdline + list directory contents
					so remap <CR> to like "if iscompleting/wildmenu, then <C-d> + <tab>

"{{{ 					vimgrep / regex:
" NOT match:
'^\(.*not_this\)\@!
"}}}

"{{{2 				BIT DUH
not vim but | pipe is or in fzf, dun forget
no specific setting to toggle the sign column. clear it with: :sign unplace *
C-o / C-i = go back to prev locations _including in other buffers_. NICE! so works for help etc..
jf open file under cursor (+ gd go to definition)
gx = open url under cursor (not from plugin, is part of vim)
"}}}


"{{{2 					 FOLDS
set foldmethod=diff
folds away all non-changed text. sounds useful...
"}}}

"{{{2 				from plugs:
WINDOWSWAP: plugin I had all along.... <Leader>ww in one window, then another, to swap them, without fucking with the arr

!!!!! tab/s-tab navigates matches while searching, without having to press enter and 'commit'...  from incsearch plug

from scriptease: K does viml help, zS show highlighting group under cursor,
:Verbose auto redir to preview window, etc... good.
}}}
vim: filetype=help foldmethod=marker modifiable noreadonly:
